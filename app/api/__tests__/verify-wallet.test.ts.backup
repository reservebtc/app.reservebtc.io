/**
 * @jest-environment node
 */

import { NextRequest } from 'next/server'
import { POST } from '../verify-wallet/route'

// Mock the validation schema
jest.mock('@/lib/validation-schemas', () => ({
  walletVerificationSchema: {
    safeParse: jest.fn(),
  },
}))

import { walletVerificationSchema } from '@/lib/validation-schemas'

// Mock the professional validator
jest.mock('@/lib/bitcoin-signature-validator-fixed', () => ({
  BitcoinSignatureValidatorFixed: {
    validateSecurity: jest.fn().mockReturnValue({
      secure: true,
      warnings: []
    }),
    validateAddressFormat: jest.fn().mockReturnValue(true),
    verify: jest.fn().mockReturnValue({
      valid: true,
      method: 'BIP-322',
      addressType: 'P2WPKH',
      network: 'mainnet',
      securityLevel: 'high'
    })
  }
}))

describe('/api/verify-wallet', () => {
  const mockValidationData = {
    bitcoinAddress: 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4',
    ethereumAddress: '0x742d35cc6435c0532925a3b8c17890c5e4e6f4b0',
    message: 'ReserveBTC verification message',
    signature: 'AkcwRAIgM2gBAQqvZX15ZHdwrkiukIzXPjWyFjPVJ2RsJLhflFcCIH4QKrYacvb35fj5zT2pNNdgK3vQD/ASnJ+r9W36hVqhASECx/EgAxlkQpQ9hcrNjhB3m1gp2fIHqOQc3XjNa6jVzQ1dGw==',
  }

  beforeEach(() => {
    jest.clearAllMocks()
  })

  test('should verify valid wallet data successfully', async () => {
    // Mock successful validation
    ;(walletVerificationSchema.safeParse as jest.Mock).mockReturnValue({
      success: true,
      data: mockValidationData,
    })

    const request = new NextRequest('http://localhost:3000/api/verify-wallet', {
      method: 'POST',
      body: JSON.stringify(mockValidationData),
      headers: {
        'Content-Type': 'application/json',
      },
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(200)
    expect(data.success).toBe(true)
  })

  test('should reject invalid input data', async () => {
    // Mock validation to fail for invalid address
    const { BitcoinSignatureValidatorFixed } = require('@/lib/bitcoin-signature-validator-fixed')
    BitcoinSignatureValidatorFixed.validateAddressFormat.mockReturnValue(false)

    const invalidData = {
      ...mockValidationData,
      bitcoinAddress: 'invalid-address',
    }

    const request = new NextRequest('http://localhost:3000/api/verify-wallet', {
      method: 'POST',
      body: JSON.stringify(invalidData),
    })

    const response = await POST(request)
    expect(response.status).toBe(400)

    // Reset mock for other tests
    BitcoinSignatureValidatorFixed.validateAddressFormat.mockReturnValue(true)
  })

  test('should handle malformed JSON', async () => {
    // Suppress console.error for this test
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})
    
    const request = new NextRequest('http://localhost:3000/api/verify-wallet', {
      method: 'POST',
      body: 'invalid-json',
    })

    const response = await POST(request)
    expect(response.status).toBe(500)
    
    consoleSpy.mockRestore()
  })
})